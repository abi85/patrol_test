definitions:
  qa_emails: &qa_emails
    - baloabby@gmail.com
  
  artifacts: &artifacts
    - patrol-results/**/*.png
    - patrol-results/**/*.xml
    - patrol-results/**/*.mp4
    - test-reports/**/*
    - test-summary/**/*

  max_build_duration: &duration 120

  env_settings: &env_settings
    flutter: 3.24.3
    xcode: latest
    cocoapods: default

  scripts:
    - &setup_report_dirs
      name: Setup Report Directories
      script: |
        mkdir -p test-reports/{android,ios}/{xml,html}
        mkdir -p test-summary

    - &install_flutter_dependencies
      name: Get Flutter dependencies
      script: |
        flutter clean
        flutter pub get

    - &install_patrol_cli
      name: Install Patrol CLI
      script: |
        dart pub global activate patrol_cli 3.4.0
        export PATH="$PATH:$HOME/.pub-cache/bin"

    - &android_setup_emulator
      name: Setup Android Emulator
      script: |
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        sdkmanager --update
        yes | sdkmanager --licenses
        cd $ANDROID_HOME/tools
        emulator -avd emulator-34 &
        adb wait-for-device
        adb shell input keyevent 82

    - &android_patrol_test
      name: Run Android Patrol Tests
      script: |
        TEST_RESULTS="test-reports/android"
        patrol test -t integration_test/fail_login_test.dart \
          --verbose \
          --reporter junit \
          --output "$TEST_RESULTS/xml/test-results.xml"
        
        # Generate HTML report
        echo "<html><head><title>Android Test Report</title></head><body>" > "$TEST_RESULTS/html/report.html"
        echo "<h1>Android Patrol Test Results</h1>" >> "$TEST_RESULTS/html/report.html"
        echo "<pre>" >> "$TEST_RESULTS/html/report.html"
        cat "$TEST_RESULTS/xml/test-results.xml" >> "$TEST_RESULTS/html/report.html"
        echo "</pre></body></html>" >> "$TEST_RESULTS/html/report.html"
      ignore_failure: false

    - &ios_setup
      name: Setup iOS Environment
      script: |
        cd ios
        pod repo update
        pod install
        cd ..

    - &ios_simulator_setup
      name: Start iOS Simulator
      script: |
        xcrun simctl boot "iPhone 15"

    - &ios_patrol_test
      name: Run iOS Patrol Tests
      script: |
        TEST_RESULTS="test-reports/ios"
        patrol test -t integration_test/fail_login_test.dart \
          -d "iPhone 15" \
          --verbose \
          --reporter junit \
          --output "$TEST_RESULTS/xml/test-results.xml"
        
        # Generate HTML report
        echo "<html><head><title>iOS Test Report</title></head><body>" > "$TEST_RESULTS/html/report.html"
        echo "<h1>iOS Patrol Test Results</h1>" >> "$TEST_RESULTS/html/report.html"
        echo "<pre>" >> "$TEST_RESULTS/html/report.html"
        cat "$TEST_RESULTS/xml/test-results.xml" >> "$TEST_RESULTS/html/report.html"
        echo "</pre></body></html>" >> "$TEST_RESULTS/html/report.html"

    - &generate_test_summary
      name: Generate Test Summary
      script: |
        SUMMARY_DIR="test-summary"
        PLATFORM="${PLATFORM:-unknown}"
        
        echo "Test Results Summary for $PLATFORM" > "$SUMMARY_DIR/summary.txt"
        echo "=================================" >> "$SUMMARY_DIR/summary.txt"
        echo "Date: $(date)" >> "$SUMMARY_DIR/summary.txt"
        echo "" >> "$SUMMARY_DIR/summary.txt"
        
        if [ -f "test-reports/$PLATFORM/xml/test-results.xml" ]; then
          echo "Test Results:" >> "$SUMMARY_DIR/summary.txt"
          grep -E "tests|failures|errors" "test-reports/$PLATFORM/xml/test-results.xml" >> "$SUMMARY_DIR/summary.txt"
        else
          echo "No test results found" >> "$SUMMARY_DIR/summary.txt"
        fi

workflows:
  patrol_android_test:
    name: Android Test Workflow
    max_build_duration: *duration
    instance_type: linux
    environment:
      <<: *env_settings
    scripts:
      - *setup_report_dirs
      - *install_flutter_dependencies
      - *install_patrol_cli
      - *android_setup_emulator
      - script: |
          export PLATFORM=android
          source $FCI_BUILD_DIR/.env
      - *android_patrol_test
      - *generate_test_summary
    publishing:
      email:
        recipients: *qa_emails
        notify:
          success: true
          failure: true
    artifacts:
      - test-reports/android/html/report.html
      - test-summary/summary.txt

  patrol_ios_test:
    name: iOS Test Workflow
    instance_type: mac_mini_m2
    max_build_duration: *duration
    environment:
      <<: *env_settings
    scripts:
      - *setup_report_dirs
      - *install_flutter_dependencies
      - *install_patrol_cli
      - *ios_setup
      - *ios_simulator_setup
      - script: |
          export PLATFORM=ios
          source $FCI_BUILD_DIR/.env
      - *ios_patrol_test
      - *generate_test_summary
    publishing:
      email:
        recipients: *qa_emails
        notify:
          success: true
          failure: true
    artifacts:
      - test-reports/ios/html/report.html
      - test-summary/summary.txt