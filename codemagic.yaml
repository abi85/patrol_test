definitions:
  qa_emails: &qa_emails
    - baloabby@gmail.com
  
  artifacts: &artifacts
    - patrol-results/**/*.png
    - patrol-results/**/*.xml
    - patrol-results/**/*.mp4
    - reports/**/*.txt  # Added .txt artifacts for the reports

  max_build_duration: &duration 120

  env_settings: &env_settings
    flutter: 3.24.3
    xcode: latest
    cocoapods: default

  scripts:
    - &install_flutter_dependencies
      name: Get Flutter dependencies
      script: |
        flutter clean
        flutter pub get

    - &install_patrol_cli
      name: Install Patrol CLI
      script: |
        dart pub global activate patrol_cli 3.4.0

    - &android_setup_emulator
      name: Setup Android Emulator
      script: |
        # Setup SDK
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        sdkmanager --update
        yes | sdkmanager --licenses
        
        # Create and launch emulator
        cd $ANDROID_HOME/tools
        emulator -avd emulator-34 &
        adb wait-for-device
        adb shell input keyevent 82

    - &android_patrol_test
      name: Run Android Patrol Tests
      script: |
        mkdir -p reports
        TEST_OUTPUT=$(patrol test -t integration_test/fail_login_test.dart --verbose)
        echo "Android Test Results - $(date)" > reports/test_report.txt
        echo "----------------------------------------" >> reports/test_report.txt
        echo "$TEST_OUTPUT" >> reports/test_report.txt
        echo "----------------------------------------" >> reports/test_report.txt
        echo "Test Completed at: $(date)" >> reports/test_report.txt
      ignore_failure: false

    - &ios_setup
      name: Setup iOS Environment
      script: |
        cd ios
        pod repo update
        pod install
        cd ..

    - &ios_simulator_setup
      name: Start iOS Simulator
      script: |
        xcrun simctl boot "iPhone 15"

    - &ios_patrol_test
      name: Run iOS Patrol Tests
      script: |
        mkdir -p reports
        TEST_OUTPUT=$(patrol test -t integration_test/fail_login_test.dart -d "iPhone 15" --verbose)
        echo "iOS Test Results - $(date)" > reports/test_report.txt
        echo "----------------------------------------" >> reports/test_report.txt
        echo "$TEST_OUTPUT" >> reports/test_report.txt
        echo "----------------------------------------" >> reports/test_report.txt
        echo "Test Completed at: $(date)" >> reports/test_report.txt

    - &generate_test_report
      name: Generate Test Report
      script: |
        which mail
        if [ ! -f reports/test_report.txt ]; then
          echo "Test report not found. Skipping email sending."
          exit 1
        fi
        echo "Test report generated at reports/test_report.txt"

    - &send_test_results_email
      name: Email Test Results
      script: |
        echo "Sending test results to QA team..."

        # Ensure the test report exists and is not empty
        if [ ! -f reports/test_report.txt ]; then
          echo "Test report not found at reports/test_report.txt. Exiting."
          exit 1
        fi

        if [ ! -s reports/test_report.txt ]; then
          echo "Test report is empty. Exiting."
          exit 1
        fi

        # Show file details for debugging
        echo "Test report file details:"
        ls -lh reports/test_report.txt

        # Create email with the test report content
        (
          echo "Subject: Test Results: Patrol Tests"
          echo "To: baloabby@gmail.com"
          echo "MIME-Version: 1.0"
          echo "Content-Type: multipart/mixed; boundary=\"boundary123\""
          echo ""
          echo "--boundary123"
          echo "Content-Type: text/plain; charset=\"UTF-8\""
          echo ""
          echo "Please find the test results attached."
          echo ""
          echo "--boundary123"
          echo "Content-Type: text/plain; name=\"test_report.txt\""
          echo "Content-Disposition: attachment; filename=\"test_report.txt\""
          echo "Content-Transfer-Encoding: base64"
          echo ""
          base64 reports/test_report.txt
          echo ""
          echo "--boundary123--"
        ) | sendmail -t

        echo "Email sent successfully with test report attached."

workflows:
  patrol_android_test:
    name: Android Test Workflow
    max_build_duration: *duration
    instance_type: linux
    environment:
      <<: *env_settings
    scripts:
      - *install_flutter_dependencies
      - *install_patrol_cli
      - *android_setup_emulator
      - *android_patrol_test
      - *generate_test_report
      - *send_test_results_email 
    artifacts: 
      - *artifacts  # Include all artifacts, including .txt reports
    publishing:
      email:
        recipients: *qa_emails

  patrol_ios_test:
    name: iOS Test Workflow
    instance_type: mac_mini_m2
    max_build_duration: *duration
    environment:
      <<: *env_settings
    scripts:
      - *install_flutter_dependencies
      - *install_patrol_cli
      - *ios_setup
      - *ios_simulator_setup
      - *ios_patrol_test
      - *generate_test_report
      - *send_test_results_email 
    artifacts:
      - *artifacts  # Include all artifacts, including .txt reports
    publishing:
      slack:
        channel: '#codemagic'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
